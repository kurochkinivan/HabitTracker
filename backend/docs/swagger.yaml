basePath: /v1
definitions:
  apperr.AppError:
    properties:
      code:
        type: string
      dev_message:
        type: string
      err_message:
        type: string
      user_message:
        type: string
    type: object
  v1.createRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      interval:
        description: daily, weekly, custom
        enum:
        - daily
        - weekly
        - custom
        type: string
      name:
        type: string
      notification_times:
        items:
          type: string
        type: array
      schedule_days:
        items:
          type: integer
        type: array
    type: object
  v1.getCategoriesResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  v1.getDaysResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  v1.getHabitsResponse:
    properties:
      category_name:
        type: string
      description:
        type: string
      id:
        type: integer
      interval:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      notification_times:
        items:
          $ref: '#/definitions/v1.notificationTime'
        type: array
      popularity_index:
        type: number
      schedule_days:
        items:
          type: string
        type: array
    type: object
  v1.getVerifCodeRequest:
    properties:
      email:
        type: string
    type: object
  v1.loginRequest:
    properties:
      email:
        type: string
      fingerprint:
        type: string
      password:
        type: string
    type: object
  v1.loginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  v1.logoutRequest:
    properties:
      refresh_token:
        type: string
    type: object
  v1.notificationTime:
    properties:
      is_active:
        type: boolean
      time:
        type: string
    type: object
  v1.refreshTokensRequest:
    properties:
      fingerprint:
        type: string
      refresh_token:
        type: string
      user_id:
        type: string
    type: object
  v1.refreshTokensResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  v1.registerRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  v1.verifyCodeRequest:
    properties:
      code:
        type: string
      email:
        type: string
      fingerprint:
        type: string
    type: object
  v1.verifyCodeResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: habit tracker API for mobile app
  title: Habit Tracker API
  version: "1.0"
paths:
  /auth/check-auth:
    get:
      description: check access token
      parameters:
      - description: 'Authorization header must be set for valid response. It should
          be in format: Bearer {access_token}'
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK. Access token is valid
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperr.AppError'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperr.AppError'
      summary: Check auth header
      tags:
      - auth
  /auth/get-verification-code:
    post:
      consumes:
      - application/json
      description: send verification code to user's email
      parameters:
      - description: getVerifCode request parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.getVerifCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK. Email with verification code was sent to user
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperr.AppError'
        "404":
          description: Not Found. User with provided email is not signing up
          schema:
            $ref: '#/definitions/apperr.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperr.AppError'
      summary: Get verification code
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: log user in
      parameters:
      - description: login request parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK. User was logged in
          schema:
            $ref: '#/definitions/v1.loginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperr.AppError'
        "401":
          description: Unauthorized. Email or password is incorrect
          schema:
            $ref: '#/definitions/apperr.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperr.AppError'
      summary: Log user in
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: log user out using refresh-token
      parameters:
      - description: logout request parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.logoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK. User was logged out
          schema:
            $ref: '#/definitions/v1.refreshTokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperr.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperr.AppError'
      summary: Log user out
      tags:
      - auth
  /auth/refresh-tokens:
    post:
      consumes:
      - application/json
      description: get new access and refresh tokens
      parameters:
      - description: refreshTokens request parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.refreshTokensRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK. Tokens were refreshed
          schema:
            $ref: '#/definitions/v1.refreshTokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperr.AppError'
        "401":
          description: Unauthorized. Request cannot be processed with provided credentials
          schema:
            $ref: '#/definitions/apperr.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperr.AppError'
      summary: Refresh tokens
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: register new user
      parameters:
      - description: register request parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.registerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK. Message was sent to user
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperr.AppError'
        "409":
          description: Conflict. User with provided email already exists
          schema:
            $ref: '#/definitions/apperr.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperr.AppError'
      summary: Register user
      tags:
      - auth
  /auth/verify-email:
    post:
      consumes:
      - application/json
      description: verify user's email by confirmation code
      parameters:
      - description: verify code request parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.verifyCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK. User was verified
          schema:
            $ref: '#/definitions/v1.verifyCodeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperr.AppError'
        "401":
          description: Unauthorized. User provided invalid verification code
          schema:
            $ref: '#/definitions/apperr.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperr.AppError'
      summary: Verify user's email
      tags:
      - auth
  /habits/categories:
    get:
      description: Get habits categories
      produces:
      - application/json
      responses:
        "200":
          description: OK.
          schema:
            items:
              $ref: '#/definitions/v1.getCategoriesResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperr.AppError'
        "401":
          description: Unauthorized. User does not have access to the habits
          schema:
            $ref: '#/definitions/apperr.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperr.AppError'
      summary: Get habits categories
      tags:
      - habits
  /habits/days:
    get:
      description: Get week days
      produces:
      - application/json
      responses:
        "200":
          description: OK.
          schema:
            items:
              $ref: '#/definitions/v1.getDaysResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperr.AppError'
        "401":
          description: Unauthorized. User does not have access to the habits
          schema:
            $ref: '#/definitions/apperr.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperr.AppError'
      summary: Get week days
      tags:
      - habits
  /users/{id}/habits:
    get:
      description: Get list of user's habits
      parameters:
      - description: 'Authorization header must be set for valid response. It should
          be in format: Bearer {access_token}'
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK.
          schema:
            items:
              $ref: '#/definitions/v1.getHabitsResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperr.AppError'
        "401":
          description: Unauthorized. User does not have access to the habits
          schema:
            $ref: '#/definitions/apperr.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperr.AppError'
      summary: Get list of user's habits
      tags:
      - habits
    post:
      consumes:
      - application/json
      description: Create habit for user
      parameters:
      - description: 'Authorization header must be set for valid response. It should
          be in format: Bearer {access_token}'
        in: header
        name: Authorization
        required: true
        type: string
      - description: create habit request parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.createRequest'
      - description: Interval type
        in: body
        name: interval
        required: true
        schema:
          enum:
          - daily
          - weekly
          - custom
          type: string
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperr.AppError'
        "401":
          description: Unauthorized. User does not have access to the habits
          schema:
            $ref: '#/definitions/apperr.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperr.AppError'
      summary: Create habit for user
      tags:
      - habits
swagger: "2.0"
