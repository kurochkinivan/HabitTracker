{
    "swagger": "2.0",
    "info": {
        "description": "habit tracker API for mobile app",
        "title": "Habit Tracker API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/v1",
    "paths": {
        "/auth/check-auth": {
            "get": {
                "description": "check access token",
                "tags": [
                    "auth"
                ],
                "summary": "Check auth header",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header must be set for valid response. It should be in format: Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Access token is valid"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    }
                }
            }
        },
        "/auth/get-verification-code": {
            "post": {
                "description": "send verification code to user's email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get verification code",
                "parameters": [
                    {
                        "description": "getVerifCode request parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.getVerifCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Email with verification code was sent to user"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "404": {
                        "description": "Not Found. User with provided email is not signing up",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "log user in",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Log user in",
                "parameters": [
                    {
                        "description": "login request parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.loginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. User was logged in",
                        "schema": {
                            "$ref": "#/definitions/v1.loginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Email or password is incorrect",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "log user out using refresh-token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Log user out",
                "parameters": [
                    {
                        "description": "logout request parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.logoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. User was logged out",
                        "schema": {
                            "$ref": "#/definitions/v1.refreshTokensResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    }
                }
            }
        },
        "/auth/refresh-tokens": {
            "post": {
                "description": "get new access and refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh tokens",
                "parameters": [
                    {
                        "description": "refreshTokens request parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.refreshTokensRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Tokens were refreshed",
                        "schema": {
                            "$ref": "#/definitions/v1.refreshTokensResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Request cannot be processed with provided credentials",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "register new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "register request parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.registerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. Message was sent to user"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "409": {
                        "description": "Conflict. User with provided email already exists",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    }
                }
            }
        },
        "/auth/verify-email": {
            "post": {
                "description": "verify user's email by confirmation code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify user's email",
                "parameters": [
                    {
                        "description": "verify code request parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.verifyCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK. User was verified",
                        "schema": {
                            "$ref": "#/definitions/v1.verifyCodeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. User provided invalid verification code",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    }
                }
            }
        },
        "/habits/categories": {
            "get": {
                "description": "Get habits categories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "habits"
                ],
                "summary": "Get habits categories",
                "responses": {
                    "200": {
                        "description": "OK.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.getCategoriesResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. User does not have access to the habits",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    }
                }
            }
        },
        "/habits/days": {
            "get": {
                "description": "Get week days",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "habits"
                ],
                "summary": "Get week days",
                "responses": {
                    "200": {
                        "description": "OK.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.getDaysResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. User does not have access to the habits",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    }
                }
            }
        },
        "/users/{id}/habits": {
            "get": {
                "description": "Get list of user's habits",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "habits"
                ],
                "summary": "Get list of user's habits",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header must be set for valid response. It should be in format: Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.getHabitsResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. User does not have access to the habits",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create habit for user",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "habits"
                ],
                "summary": "Create habit for user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header must be set for valid response. It should be in format: Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "create habit request parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.createRequest"
                        }
                    },
                    {
                        "description": "Interval type",
                        "name": "interval",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "daily",
                                "weekly",
                                "custom"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. User does not have access to the habits",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperr.AppError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apperr.AppError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "dev_message": {
                    "type": "string"
                },
                "err_message": {
                    "type": "string"
                },
                "user_message": {
                    "type": "string"
                }
            }
        },
        "v1.createRequest": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "interval": {
                    "description": "daily, weekly, custom",
                    "type": "string",
                    "enum": [
                        "daily",
                        "weekly",
                        "custom"
                    ]
                },
                "name": {
                    "type": "string"
                },
                "notification_times": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "schedule_days": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "v1.getCategoriesResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "v1.getDaysResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "v1.getHabitsResponse": {
            "type": "object",
            "properties": {
                "category_name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "interval": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "notification_times": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.notificationTime"
                    }
                },
                "popularity_index": {
                    "type": "number"
                },
                "schedule_days": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.getVerifCodeRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "v1.loginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "v1.loginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "v1.logoutRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "v1.notificationTime": {
            "type": "object",
            "properties": {
                "is_active": {
                    "type": "boolean"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "v1.refreshTokensRequest": {
            "type": "object",
            "properties": {
                "fingerprint": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "v1.refreshTokensResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "v1.registerRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "v1.verifyCodeRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                }
            }
        },
        "v1.verifyCodeResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        }
    }
}